// Umer Kamran
// CSC229

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class BooleanExpressionParser {
    

    // Stack implementation using a singly linked list
    
            static class Stack<T> {
        

// Node class for the singly linked list
        
        
            private class Node {
            
                     T data;      // Data of the node
                     
Node next;   // Reference to the next node

            Node(T data) {
                
                this.data = data;
                
                
    }
            
            
        }
        

private Node top;  // This is the top of the stack
        

                // Push an element onto the stack
        
        public void push(T data) {
            
            
            
            Node node = new Node(data); 
           
 // Create a new node with the given data
          node.next = top;            // Set the next of new node to current top
            
            top = node;                 // Update top to the new node
            
        }

        // Pop an element from the stack
        
        public T pop() {
            
                    if (isEmpty()) throw new IllegalStateException("Stack is empty");
                    
                    
     T data = top.data;         // Get data from the top node
              
              
                  top = top.next;          
                  // Move top to the next node
            return data;
            
        }

       
        // Peek at the top element of the stack without removing it
      
                      public T peek() {
                          
            
            if (isEmpty()) throw new IllegalStateException("Stack is empty");
            return top.data;
            
            
  }

// Check if the stack is empty
      
          public boolean isEmpty() {
              
    return top == null;
    
    
          
             }
    }

    // Convert an infix Boolean expression to postfix notation using the Shunting Yard Algorithm
    
              private static String infixToPostfix(String expression) {
             
             
        StringBuilder postfix = new StringBuilder();
        
         Stack<Character> operators = new Stack<>(); 
         // Stack for operators
        
                Set<Character> variables = new HashSet<>(); // Set to store unique variables
        

                
                
                 // Loop through each character in the expression
                 
                        for (char c : expression.toCharArray()) {
                    
                    
                   if (Character.isLetter(c)) {
                       
                       
     postfix.append(c);    
                     
                     
  // Append variables directly to the postfix expression
  
                    variables.add(c);      // Add the variable to the set
                    
        } else if (c == '(') {
            
                
operators.push(c);     
                // Push '(' onto the operator stack

            }
            else if (c == ')') {
                
                
                     // Pop until '(' is found
                 
                
      while (!operators.isEmpty() && operators.peek() != '(') {
          
                         postfix.append(operators.pop());
                
          
      }
      
               
                operators.pop();       // Remove '(' from the stack
                
         } else if (isOperator(c)) {
                
     // Pop operators with higher or equal precedence
     
                
               
                while (!operators.isEmpty() && precedence(c) <= precedence(operators.peek())) {
                    
                    
                   
                   postfix.append(operators.pop());
                    
                }
                
     operators.push(c);     // Push the current operator
     
}
          }

                 // Pop any remaining operators in the stack
                 
                 
       
        while (!operators.isEmpty()) {
            
            
     postfix.append(operators.pop());
     
        }
        

        return postfix.toString();
        
    }
    

            // Check if a character is a Boolean operator
    
    
private static boolean isOperator(char c) {
    
        
                return c == '+' || c == '*' || c == '!';
        
    }
    

            // Define operator precedence levels
            
   private static int precedence(char operator) {
       
          if (operator == '!') return 3;
          // NOT has highest precedence
              
      if (operator == '*') return 2; // AND has medium precedence
      
                       if (operator == '+') return 1; // OR has lowest precedence
        return -1;
    }


              // Generate all possible truth values (combinations) for the variables
    
    private static List<Map<Character, Boolean>> generateTruthValues(Set<Character> variables) {
        int n = variables.size();   
        // Number of variables
            
             List<Map<Character, Boolean>> truthTable = new ArrayList<>();
        
         char[] vars = new char[n];  // Array to hold variable names

 int i = 0;
        
       
                          // Copy variables from set to array
      
        for (char var : variables) vars[i++] = var;

       
        int rows = 1 << n; // 2^n rows for truth table
     

 // Generate each row of truth values
       for (int row = 0; row < rows; row++) {
           
           
           Map<Character, Boolean> rowMap = new HashMap<>();
    
     for (i = 0; i < n; i++) {
               
               
                // Determine truth value for each variable
               
               
 rowMap.put(vars[i], (row & (1 << (n - i - 1))) != 0);
           
           
                    }
            
            
                        truthTable.add(rowMap);
      }
       
       
                 return truthTable;
   
   
    }

// Evaluate the postfix expression for a given set of variable values
    
    
         private static boolean evaluatePostfix(String postfix, Map<Character, Boolean> values) {
      
      
 Stack<Boolean> stack = new Stack<>();
             
             
                        // Loop through each character in the postfix expression
      for (char c : postfix.toCharArray()) {
          
            if (Character.isLetter(c)) {
               
               
                stack.push(values.get(c)); // Push variable's truth value onto the stack
} else if (c == '!') {
                
                boolean val = stack.pop();
                     stack.push(!val);         // Apply NOT operation
   } else {
               
                // Apply AND or OR operation
                
         boolean b = stack.pop();
                
   boolean a = stack.pop();
                
                if (c == '+') stack.push(a || b); // OR operation
                
                
                if (c == '*') stack.push(a && b); // AND operation
                 }
       
       
       
        }
        return stack.pop(); // Final result
    }

    
    // Generate and print the truth table for a given Boolean expression
   
    public static void generateTruthTable(String expression) {
       
        // Convert infix expression to postfix
        
                     String postfix = infixToPostfix(expression);

        
  // Extract unique variables from the expression
        
                 Set<Character> variables = new HashSet<>();
       
      
      
        for (char c : expression.toCharArray()) {
           
            if (Character.isLetter(c)) variables.add(c);
   
        }

 // Generate all combinations of truth values
        
        
     List<Map<Character, Boolean>> truthValues = generateTruthValues(variables);

// Print header
        
                 for (char var : variables) System.out.print(var + " | ");
        
        System.out.println(expression);
        
        
               System.out.println("----".repeat(variables.size()) + "---------");
        

     // Print each row of the truth table
        
                 for (Map<Character, Boolean> values : truthValues) {
            
  for (char var : variables) {
                
                
                System.out.print((values.get(var) ? "T" : "F") + " | ");
           
           
            }
    System.out.println(evaluatePostfix(postfix, values) ? "T" : "F");
            
             }
 
 
    }

public static void main(String[] args) {
        
        
        // Define a Boolean expression
        
            String expression = "A+B*C";
        
                     System.out.println("Boolean Expression: " + expression);
       
     
      System.out.println("Truth Table:");
        
             generateTruthTable(expression); // Generate and print truth table
        
          }
    
    
    }
